// Code generated by enum-generate.go DO NOT EDIT.

package cli

import "gogs.mikescher.com/BlackForestBytes/goext/langext"
import "gogs.mikescher.com/BlackForestBytes/goext/enums"

const ChecksumEnumGenerator = "34f0a5719e249d761d8c47f0c12a25c54a34b38d3a7cafb32c29e2c6eab42472" // GoExtVersion: 0.0.475

// ================================ OutputFormat ================================
//
// File:       formats.go
// StringEnum: true
// DescrEnum:  false
// DataEnum:   false
//

var __OutputFormatValues = []OutputFormat{
	OutputFormatText,
	OutputFormatJson,
	OutputFormatNetscape,
	OutputFormatXML,
	OutputFormatTable,
	OutputFormatTSV,
	OutputFormatCSV,
}

var __OutputFormatVarnames = map[OutputFormat]string{
	OutputFormatText:     "OutputFormatText",
	OutputFormatJson:     "OutputFormatJson",
	OutputFormatNetscape: "OutputFormatNetscape",
	OutputFormatXML:      "OutputFormatXML",
	OutputFormatTable:    "OutputFormatTable",
	OutputFormatTSV:      "OutputFormatTSV",
	OutputFormatCSV:      "OutputFormatCSV",
}

func (e OutputFormat) Valid() bool {
	return langext.InArray(e, __OutputFormatValues)
}

func (e OutputFormat) Values() []OutputFormat {
	return __OutputFormatValues
}

func (e OutputFormat) ValuesAny() []any {
	return langext.ArrCastToAny(__OutputFormatValues)
}

func (e OutputFormat) ValuesMeta() []enums.EnumMetaValue {
	return OutputFormatValuesMeta()
}

func (e OutputFormat) String() string {
	return string(e)
}

func (e OutputFormat) VarName() string {
	if d, ok := __OutputFormatVarnames[e]; ok {
		return d
	}
	return ""
}

func (e OutputFormat) TypeName() string {
	return "OutputFormat"
}

func (e OutputFormat) PackageName() string {
	return "cli"
}

func (e OutputFormat) Meta() enums.EnumMetaValue {
	return enums.EnumMetaValue{VarName: e.VarName(), Value: e, Description: nil}
}

func ParseOutputFormat(vv string) (OutputFormat, bool) {
	for _, ev := range __OutputFormatValues {
		if string(ev) == vv {
			return ev, true
		}
	}
	return "", false
}

func OutputFormatValues() []OutputFormat {
	return __OutputFormatValues
}

func OutputFormatValuesMeta() []enums.EnumMetaValue {
	return []enums.EnumMetaValue{
		OutputFormatText.Meta(),
		OutputFormatJson.Meta(),
		OutputFormatNetscape.Meta(),
		OutputFormatXML.Meta(),
		OutputFormatTable.Meta(),
		OutputFormatTSV.Meta(),
		OutputFormatCSV.Meta(),
	}
}

// ================================ Mode ================================
//
// File:       subcommands.go
// StringEnum: true
// DescrEnum:  false
// DataEnum:   false
//

var __ModeValues = []Mode{
	ModeHelp,
	ModeVersion,
	ModeLogin,
	ModeTokenRefresh,
	ModeCheckSession,
	ModeQuotaGet,
	ModeCollectionsList,
	ModeRecordsList,
	ModeRecordsGet,
	ModeRecordsDelete,
	ModeCollectionsDelete,
	ModeDeleteAll,
	ModeRecordsCreate,
	ModeRecordsUpdate,
	ModeMetaGet,
	ModeBookmarksBase,
	ModeBookmarksList,
	ModeBookmarksDelete,
	ModeBookmarksCreateBase,
	ModeBookmarksCreateBookmark,
	ModeBookmarksCreateFolder,
	ModeBookmarksCreateSeparator,
	ModeBookmarksUpdate,
	ModePasswordsBase,
	ModePasswordsList,
	ModePasswordsGet,
	ModePasswordsCreate,
	ModePasswordsUpdate,
	ModePasswordsDelete,
	ModeFormsBase,
	ModeFormsList,
	ModeFormsGet,
	ModeFormsCreate,
	ModeFormsDelete,
	ModeHistoryBase,
	ModeHistoryList,
	ModeHistoryDelete,
	ModeTabsBase,
	ModeTabsList,
}

var __ModeVarnames = map[Mode]string{
	ModeHelp:                     "ModeHelp",
	ModeVersion:                  "ModeVersion",
	ModeLogin:                    "ModeLogin",
	ModeTokenRefresh:             "ModeTokenRefresh",
	ModeCheckSession:             "ModeCheckSession",
	ModeQuotaGet:                 "ModeQuotaGet",
	ModeCollectionsList:          "ModeCollectionsList",
	ModeRecordsList:              "ModeRecordsList",
	ModeRecordsGet:               "ModeRecordsGet",
	ModeRecordsDelete:            "ModeRecordsDelete",
	ModeCollectionsDelete:        "ModeCollectionsDelete",
	ModeDeleteAll:                "ModeDeleteAll",
	ModeRecordsCreate:            "ModeRecordsCreate",
	ModeRecordsUpdate:            "ModeRecordsUpdate",
	ModeMetaGet:                  "ModeMetaGet",
	ModeBookmarksBase:            "ModeBookmarksBase",
	ModeBookmarksList:            "ModeBookmarksList",
	ModeBookmarksDelete:          "ModeBookmarksDelete",
	ModeBookmarksCreateBase:      "ModeBookmarksCreateBase",
	ModeBookmarksCreateBookmark:  "ModeBookmarksCreateBookmark",
	ModeBookmarksCreateFolder:    "ModeBookmarksCreateFolder",
	ModeBookmarksCreateSeparator: "ModeBookmarksCreateSeparator",
	ModeBookmarksUpdate:          "ModeBookmarksUpdate",
	ModePasswordsBase:            "ModePasswordsBase",
	ModePasswordsList:            "ModePasswordsList",
	ModePasswordsGet:             "ModePasswordsGet",
	ModePasswordsCreate:          "ModePasswordsCreate",
	ModePasswordsUpdate:          "ModePasswordsUpdate",
	ModePasswordsDelete:          "ModePasswordsDelete",
	ModeFormsBase:                "ModeFormsBase",
	ModeFormsList:                "ModeFormsList",
	ModeFormsGet:                 "ModeFormsGet",
	ModeFormsCreate:              "ModeFormsCreate",
	ModeFormsDelete:              "ModeFormsDelete",
	ModeHistoryBase:              "ModeHistoryBase",
	ModeHistoryList:              "ModeHistoryList",
	ModeHistoryDelete:            "ModeHistoryDelete",
	ModeTabsBase:                 "ModeTabsBase",
	ModeTabsList:                 "ModeTabsList",
}

func (e Mode) Valid() bool {
	return langext.InArray(e, __ModeValues)
}

func (e Mode) Values() []Mode {
	return __ModeValues
}

func (e Mode) ValuesAny() []any {
	return langext.ArrCastToAny(__ModeValues)
}

func (e Mode) ValuesMeta() []enums.EnumMetaValue {
	return ModeValuesMeta()
}

func (e Mode) String() string {
	return string(e)
}

func (e Mode) VarName() string {
	if d, ok := __ModeVarnames[e]; ok {
		return d
	}
	return ""
}

func (e Mode) TypeName() string {
	return "Mode"
}

func (e Mode) PackageName() string {
	return "cli"
}

func (e Mode) Meta() enums.EnumMetaValue {
	return enums.EnumMetaValue{VarName: e.VarName(), Value: e, Description: nil}
}

func ParseMode(vv string) (Mode, bool) {
	for _, ev := range __ModeValues {
		if string(ev) == vv {
			return ev, true
		}
	}
	return "", false
}

func ModeValues() []Mode {
	return __ModeValues
}

func ModeValuesMeta() []enums.EnumMetaValue {
	return []enums.EnumMetaValue{
		ModeHelp.Meta(),
		ModeVersion.Meta(),
		ModeLogin.Meta(),
		ModeTokenRefresh.Meta(),
		ModeCheckSession.Meta(),
		ModeQuotaGet.Meta(),
		ModeCollectionsList.Meta(),
		ModeRecordsList.Meta(),
		ModeRecordsGet.Meta(),
		ModeRecordsDelete.Meta(),
		ModeCollectionsDelete.Meta(),
		ModeDeleteAll.Meta(),
		ModeRecordsCreate.Meta(),
		ModeRecordsUpdate.Meta(),
		ModeMetaGet.Meta(),
		ModeBookmarksBase.Meta(),
		ModeBookmarksList.Meta(),
		ModeBookmarksDelete.Meta(),
		ModeBookmarksCreateBase.Meta(),
		ModeBookmarksCreateBookmark.Meta(),
		ModeBookmarksCreateFolder.Meta(),
		ModeBookmarksCreateSeparator.Meta(),
		ModeBookmarksUpdate.Meta(),
		ModePasswordsBase.Meta(),
		ModePasswordsList.Meta(),
		ModePasswordsGet.Meta(),
		ModePasswordsCreate.Meta(),
		ModePasswordsUpdate.Meta(),
		ModePasswordsDelete.Meta(),
		ModeFormsBase.Meta(),
		ModeFormsList.Meta(),
		ModeFormsGet.Meta(),
		ModeFormsCreate.Meta(),
		ModeFormsDelete.Meta(),
		ModeHistoryBase.Meta(),
		ModeHistoryList.Meta(),
		ModeHistoryDelete.Meta(),
		ModeTabsBase.Meta(),
		ModeTabsList.Meta(),
	}
}

// ================================ ================= ================================

func AllPackageEnums() []enums.Enum {
	return []enums.Enum{
		OutputFormatText, // OutputFormat
		ModeHelp,         // Mode
	}
}
